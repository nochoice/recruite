# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  age: Int
  isGreen: Int
  password: PasswordState
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  watching(
    where: CandidateWhereInput! = {}
    orderBy: [CandidateOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Candidate!]
  watchingCount(where: CandidateWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  age: IntNullableFilter
  isGreen: IntNullableFilter
  posts: PostManyRelationFilter
  watching: CandidateManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input CandidateManyRelationFilter {
  every: CandidateWhereInput
  some: CandidateWhereInput
  none: CandidateWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  age: OrderDirection
  isGreen: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  age: Int
  isGreen: Int
  password: String
  posts: PostRelateToManyForUpdateInput
  watching: CandidateRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input CandidateRelateToManyForUpdateInput {
  disconnect: [CandidateWhereUniqueInput!]
  set: [CandidateWhereUniqueInput!]
  create: [CandidateCreateInput!]
  connect: [CandidateWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  age: Int
  isGreen: Int
  password: String
  posts: PostRelateToManyForCreateInput
  watching: CandidateRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input CandidateRelateToManyForCreateInput {
  create: [CandidateCreateInput!]
  connect: [CandidateWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  status: String
  content: Post_content_Document
  publishDate: DateTime
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  addresses(
    where: AddressWhereInput! = {}
    orderBy: [AddressOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Address!]
  addressesCount(where: AddressWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringNullableFilter
  publishDate: DateTimeNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
  addresses: AddressManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input AddressManyRelationFilter {
  every: AddressWhereInput
  some: AddressWhereInput
  none: AddressWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input PostUpdateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  addresses: AddressRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input AddressRelateToManyForUpdateInput {
  disconnect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  addresses: AddressRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input AddressRelateToManyForCreateInput {
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
}

type Company {
  id: ID!
  name: String
  positions(
    where: PositionWhereInput! = {}
    orderBy: [PositionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Position!]
  positionsCount(where: PositionWhereInput! = {}): Int
  addresses(
    where: AddressWhereInput! = {}
    orderBy: [AddressOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Address!]
  addressesCount(where: AddressWhereInput! = {}): Int
  contacts(
    where: ContactWhereInput! = {}
    orderBy: [ContactOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  contracts: FileFieldOutput
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input CompanyWhereUniqueInput {
  id: ID
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  id: IDFilter
  name: StringFilter
  positions: PositionManyRelationFilter
  addresses: AddressManyRelationFilter
  contacts: ContactManyRelationFilter
}

input PositionManyRelationFilter {
  every: PositionWhereInput
  some: PositionWhereInput
  none: PositionWhereInput
}

input ContactManyRelationFilter {
  every: ContactWhereInput
  some: ContactWhereInput
  none: ContactWhereInput
}

input CompanyOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CompanyUpdateInput {
  name: String
  positions: PositionRelateToManyForUpdateInput
  addresses: AddressRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  contracts: FileFieldInput
}

input PositionRelateToManyForUpdateInput {
  disconnect: [PositionWhereUniqueInput!]
  set: [PositionWhereUniqueInput!]
  create: [PositionCreateInput!]
  connect: [PositionWhereUniqueInput!]
}

input ContactRelateToManyForUpdateInput {
  disconnect: [ContactWhereUniqueInput!]
  set: [ContactWhereUniqueInput!]
  create: [ContactCreateInput!]
  connect: [ContactWhereUniqueInput!]
}

input FileFieldInput {
  upload: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input CompanyUpdateArgs {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateInput!
}

input CompanyCreateInput {
  name: String
  positions: PositionRelateToManyForCreateInput
  addresses: AddressRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  contracts: FileFieldInput
}

input PositionRelateToManyForCreateInput {
  create: [PositionCreateInput!]
  connect: [PositionWhereUniqueInput!]
}

input ContactRelateToManyForCreateInput {
  create: [ContactCreateInput!]
  connect: [ContactWhereUniqueInput!]
}

type Interview {
  id: ID!
  title: String
}

input InterviewWhereUniqueInput {
  id: ID
}

input InterviewWhereInput {
  AND: [InterviewWhereInput!]
  OR: [InterviewWhereInput!]
  NOT: [InterviewWhereInput!]
  id: IDFilter
  title: StringFilter
}

input InterviewOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input InterviewUpdateInput {
  title: String
}

input InterviewUpdateArgs {
  where: InterviewWhereUniqueInput!
  data: InterviewUpdateInput!
}

input InterviewCreateInput {
  title: String
}

type Candidate {
  id: ID!
  name: String
  surname: String
  email: String
  phone: String
  description: Candidate_description_Document
  watching(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  watchingCount(where: UserWhereInput! = {}): Int
  skills(
    where: CandidateSkillWhereInput! = {}
    orderBy: [CandidateSkillOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CandidateSkill!]
  skillsCount(where: CandidateSkillWhereInput! = {}): Int
}

type Candidate_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input CandidateWhereUniqueInput {
  id: ID
}

input CandidateWhereInput {
  AND: [CandidateWhereInput!]
  OR: [CandidateWhereInput!]
  NOT: [CandidateWhereInput!]
  id: IDFilter
  name: StringFilter
  surname: StringFilter
  email: StringFilter
  phone: StringFilter
  watching: UserManyRelationFilter
  skills: CandidateSkillManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input CandidateSkillManyRelationFilter {
  every: CandidateSkillWhereInput
  some: CandidateSkillWhereInput
  none: CandidateSkillWhereInput
}

input CandidateOrderByInput {
  id: OrderDirection
  name: OrderDirection
  surname: OrderDirection
  email: OrderDirection
  phone: OrderDirection
}

input CandidateUpdateInput {
  name: String
  surname: String
  email: String
  phone: String
  description: JSON
  watching: UserRelateToManyForUpdateInput
  skills: CandidateSkillRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input CandidateSkillRelateToManyForUpdateInput {
  disconnect: [CandidateSkillWhereUniqueInput!]
  set: [CandidateSkillWhereUniqueInput!]
  create: [CandidateSkillCreateInput!]
  connect: [CandidateSkillWhereUniqueInput!]
}

input CandidateUpdateArgs {
  where: CandidateWhereUniqueInput!
  data: CandidateUpdateInput!
}

input CandidateCreateInput {
  name: String
  surname: String
  email: String
  phone: String
  description: JSON
  watching: UserRelateToManyForCreateInput
  skills: CandidateSkillRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input CandidateSkillRelateToManyForCreateInput {
  create: [CandidateSkillCreateInput!]
  connect: [CandidateSkillWhereUniqueInput!]
}

type CandidateSkill {
  id: ID!
  skill: Skill
  fromDate: DateTime
  description: String
}

input CandidateSkillWhereUniqueInput {
  id: ID
}

input CandidateSkillWhereInput {
  AND: [CandidateSkillWhereInput!]
  OR: [CandidateSkillWhereInput!]
  NOT: [CandidateSkillWhereInput!]
  id: IDFilter
  skill: SkillWhereInput
  fromDate: DateTimeNullableFilter
  description: StringFilter
}

input CandidateSkillOrderByInput {
  id: OrderDirection
  fromDate: OrderDirection
  description: OrderDirection
}

input CandidateSkillUpdateInput {
  skill: SkillRelateToOneForUpdateInput
  fromDate: DateTime
  description: String
}

input SkillRelateToOneForUpdateInput {
  create: SkillCreateInput
  connect: SkillWhereUniqueInput
  disconnect: Boolean
}

input CandidateSkillUpdateArgs {
  where: CandidateSkillWhereUniqueInput!
  data: CandidateSkillUpdateInput!
}

input CandidateSkillCreateInput {
  skill: SkillRelateToOneForCreateInput
  fromDate: DateTime
  description: String
}

input SkillRelateToOneForCreateInput {
  create: SkillCreateInput
  connect: SkillWhereUniqueInput
}

type Contact {
  id: ID!
  image: ImageFieldOutput
  name: String
  surname: String
  description: String
  phone: String
  email: String
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ContactWhereUniqueInput {
  id: ID
}

input ContactWhereInput {
  AND: [ContactWhereInput!]
  OR: [ContactWhereInput!]
  NOT: [ContactWhereInput!]
  id: IDFilter
  name: StringFilter
  surname: StringFilter
  description: StringFilter
  phone: StringFilter
  email: StringFilter
}

input ContactOrderByInput {
  id: OrderDirection
  name: OrderDirection
  surname: OrderDirection
  description: OrderDirection
  phone: OrderDirection
  email: OrderDirection
}

input ContactUpdateInput {
  image: ImageFieldInput
  name: String
  surname: String
  description: String
  phone: String
  email: String
}

input ImageFieldInput {
  upload: Upload!
}

input ContactUpdateArgs {
  where: ContactWhereUniqueInput!
  data: ContactUpdateInput!
}

input ContactCreateInput {
  image: ImageFieldInput
  name: String
  surname: String
  description: String
  phone: String
  email: String
}

type ContactType {
  id: ID!
  type: ContactTypeTypeType
  isPrimary: Boolean
  content: String
  description: String
}

enum ContactTypeTypeType {
  mobile
  email
}

input ContactTypeWhereUniqueInput {
  id: ID
}

input ContactTypeWhereInput {
  AND: [ContactTypeWhereInput!]
  OR: [ContactTypeWhereInput!]
  NOT: [ContactTypeWhereInput!]
  id: IDFilter
  type: ContactTypeTypeTypeNullableFilter
  isPrimary: BooleanFilter
  content: StringFilter
  description: StringFilter
}

input ContactTypeTypeTypeNullableFilter {
  equals: ContactTypeTypeType
  in: [ContactTypeTypeType!]
  notIn: [ContactTypeTypeType!]
  not: ContactTypeTypeTypeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input ContactTypeOrderByInput {
  id: OrderDirection
  type: OrderDirection
  isPrimary: OrderDirection
  content: OrderDirection
  description: OrderDirection
}

input ContactTypeUpdateInput {
  type: ContactTypeTypeType
  isPrimary: Boolean
  content: String
  description: String
}

input ContactTypeUpdateArgs {
  where: ContactTypeWhereUniqueInput!
  data: ContactTypeUpdateInput!
}

input ContactTypeCreateInput {
  type: ContactTypeTypeType
  isPrimary: Boolean
  content: String
  description: String
}

type Position {
  id: ID!
  title: String
  company: Company
  description: Position_description_Document
  active: Boolean
}

type Position_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PositionWhereUniqueInput {
  id: ID
}

input PositionWhereInput {
  AND: [PositionWhereInput!]
  OR: [PositionWhereInput!]
  NOT: [PositionWhereInput!]
  id: IDFilter
  title: StringFilter
  company: CompanyWhereInput
  active: BooleanFilter
}

input PositionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  active: OrderDirection
}

input PositionUpdateInput {
  title: String
  company: CompanyRelateToOneForUpdateInput
  description: JSON
  active: Boolean
}

input CompanyRelateToOneForUpdateInput {
  create: CompanyCreateInput
  connect: CompanyWhereUniqueInput
  disconnect: Boolean
}

input PositionUpdateArgs {
  where: PositionWhereUniqueInput!
  data: PositionUpdateInput!
}

input PositionCreateInput {
  title: String
  company: CompanyRelateToOneForCreateInput
  description: JSON
  active: Boolean
}

input CompanyRelateToOneForCreateInput {
  create: CompanyCreateInput
  connect: CompanyWhereUniqueInput
}

type Address {
  id: ID!
  addressCountry: String
  addressLocality: String
  postalCode: String
  postOfficeBoxNumber: String
  streetAddress: String
}

input AddressWhereUniqueInput {
  id: ID
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  id: IDFilter
  addressCountry: StringFilter
  addressLocality: StringFilter
  postalCode: StringFilter
  postOfficeBoxNumber: StringFilter
  streetAddress: StringFilter
}

input AddressOrderByInput {
  id: OrderDirection
  addressCountry: OrderDirection
  addressLocality: OrderDirection
  postalCode: OrderDirection
  postOfficeBoxNumber: OrderDirection
  streetAddress: OrderDirection
}

input AddressUpdateInput {
  addressCountry: String
  addressLocality: String
  postalCode: String
  postOfficeBoxNumber: String
  streetAddress: String
}

input AddressUpdateArgs {
  where: AddressWhereUniqueInput!
  data: AddressUpdateInput!
}

input AddressCreateInput {
  addressCountry: String
  addressLocality: String
  postalCode: String
  postOfficeBoxNumber: String
  streetAddress: String
}

type Skill {
  id: ID!
  title: String
  description: Skill_description_Document
}

type Skill_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input SkillWhereUniqueInput {
  id: ID
}

input SkillWhereInput {
  AND: [SkillWhereInput!]
  OR: [SkillWhereInput!]
  NOT: [SkillWhereInput!]
  id: IDFilter
  title: StringFilter
}

input SkillOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input SkillUpdateInput {
  title: String
  description: JSON
}

input SkillUpdateArgs {
  where: SkillWhereUniqueInput!
  data: SkillUpdateInput!
}

input SkillCreateInput {
  title: String
  description: JSON
}

type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createCompany(data: CompanyCreateInput!): Company
  createCompanies(data: [CompanyCreateInput!]!): [Company]
  updateCompany(
    where: CompanyWhereUniqueInput!
    data: CompanyUpdateInput!
  ): Company
  updateCompanies(data: [CompanyUpdateArgs!]!): [Company]
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteCompanies(where: [CompanyWhereUniqueInput!]!): [Company]
  createInterview(data: InterviewCreateInput!): Interview
  createInterviews(data: [InterviewCreateInput!]!): [Interview]
  updateInterview(
    where: InterviewWhereUniqueInput!
    data: InterviewUpdateInput!
  ): Interview
  updateInterviews(data: [InterviewUpdateArgs!]!): [Interview]
  deleteInterview(where: InterviewWhereUniqueInput!): Interview
  deleteInterviews(where: [InterviewWhereUniqueInput!]!): [Interview]
  createCandidate(data: CandidateCreateInput!): Candidate
  createCandidates(data: [CandidateCreateInput!]!): [Candidate]
  updateCandidate(
    where: CandidateWhereUniqueInput!
    data: CandidateUpdateInput!
  ): Candidate
  updateCandidates(data: [CandidateUpdateArgs!]!): [Candidate]
  deleteCandidate(where: CandidateWhereUniqueInput!): Candidate
  deleteCandidates(where: [CandidateWhereUniqueInput!]!): [Candidate]
  createCandidateSkill(data: CandidateSkillCreateInput!): CandidateSkill
  createCandidateSkills(data: [CandidateSkillCreateInput!]!): [CandidateSkill]
  updateCandidateSkill(
    where: CandidateSkillWhereUniqueInput!
    data: CandidateSkillUpdateInput!
  ): CandidateSkill
  updateCandidateSkills(data: [CandidateSkillUpdateArgs!]!): [CandidateSkill]
  deleteCandidateSkill(where: CandidateSkillWhereUniqueInput!): CandidateSkill
  deleteCandidateSkills(
    where: [CandidateSkillWhereUniqueInput!]!
  ): [CandidateSkill]
  createContact(data: ContactCreateInput!): Contact
  createContacts(data: [ContactCreateInput!]!): [Contact]
  updateContact(
    where: ContactWhereUniqueInput!
    data: ContactUpdateInput!
  ): Contact
  updateContacts(data: [ContactUpdateArgs!]!): [Contact]
  deleteContact(where: ContactWhereUniqueInput!): Contact
  deleteContacts(where: [ContactWhereUniqueInput!]!): [Contact]
  createContactType(data: ContactTypeCreateInput!): ContactType
  createContactTypes(data: [ContactTypeCreateInput!]!): [ContactType]
  updateContactType(
    where: ContactTypeWhereUniqueInput!
    data: ContactTypeUpdateInput!
  ): ContactType
  updateContactTypes(data: [ContactTypeUpdateArgs!]!): [ContactType]
  deleteContactType(where: ContactTypeWhereUniqueInput!): ContactType
  deleteContactTypes(where: [ContactTypeWhereUniqueInput!]!): [ContactType]
  createPosition(data: PositionCreateInput!): Position
  createPositions(data: [PositionCreateInput!]!): [Position]
  updatePosition(
    where: PositionWhereUniqueInput!
    data: PositionUpdateInput!
  ): Position
  updatePositions(data: [PositionUpdateArgs!]!): [Position]
  deletePosition(where: PositionWhereUniqueInput!): Position
  deletePositions(where: [PositionWhereUniqueInput!]!): [Position]
  createAddress(data: AddressCreateInput!): Address
  createAddresses(data: [AddressCreateInput!]!): [Address]
  updateAddress(
    where: AddressWhereUniqueInput!
    data: AddressUpdateInput!
  ): Address
  updateAddresses(data: [AddressUpdateArgs!]!): [Address]
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteAddresses(where: [AddressWhereUniqueInput!]!): [Address]
  createSkill(data: SkillCreateInput!): Skill
  createSkills(data: [SkillCreateInput!]!): [Skill]
  updateSkill(where: SkillWhereUniqueInput!, data: SkillUpdateInput!): Skill
  updateSkills(data: [SkillUpdateArgs!]!): [Skill]
  deleteSkill(where: SkillWhereUniqueInput!): Skill
  deleteSkills(where: [SkillWhereUniqueInput!]!): [Skill]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  companies(
    where: CompanyWhereInput! = {}
    orderBy: [CompanyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Company!]
  company(where: CompanyWhereUniqueInput!): Company
  companiesCount(where: CompanyWhereInput! = {}): Int
  interviews(
    where: InterviewWhereInput! = {}
    orderBy: [InterviewOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Interview!]
  interview(where: InterviewWhereUniqueInput!): Interview
  interviewsCount(where: InterviewWhereInput! = {}): Int
  candidates(
    where: CandidateWhereInput! = {}
    orderBy: [CandidateOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Candidate!]
  candidate(where: CandidateWhereUniqueInput!): Candidate
  candidatesCount(where: CandidateWhereInput! = {}): Int
  candidateSkills(
    where: CandidateSkillWhereInput! = {}
    orderBy: [CandidateSkillOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CandidateSkill!]
  candidateSkill(where: CandidateSkillWhereUniqueInput!): CandidateSkill
  candidateSkillsCount(where: CandidateSkillWhereInput! = {}): Int
  contacts(
    where: ContactWhereInput! = {}
    orderBy: [ContactOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Contact!]
  contact(where: ContactWhereUniqueInput!): Contact
  contactsCount(where: ContactWhereInput! = {}): Int
  contactTypes(
    where: ContactTypeWhereInput! = {}
    orderBy: [ContactTypeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ContactType!]
  contactType(where: ContactTypeWhereUniqueInput!): ContactType
  contactTypesCount(where: ContactTypeWhereInput! = {}): Int
  positions(
    where: PositionWhereInput! = {}
    orderBy: [PositionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Position!]
  position(where: PositionWhereUniqueInput!): Position
  positionsCount(where: PositionWhereInput! = {}): Int
  addresses(
    where: AddressWhereInput! = {}
    orderBy: [AddressOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Address!]
  address(where: AddressWhereUniqueInput!): Address
  addressesCount(where: AddressWhereInput! = {}): Int
  skills(
    where: SkillWhereInput! = {}
    orderBy: [SkillOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Skill!]
  skill(where: SkillWhereUniqueInput!): Skill
  skillsCount(where: SkillWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
