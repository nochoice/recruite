// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url      = env("DATABASE_URL")
  provider = "sqlite"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id              String      @id @default(cuid())
  name            String      @default("")
  firstName       String      @default("")
  lastName        String      @default("")
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_id        String?
  phone           String      @default("")
  linkedIn        String      @default("")
  email           String      @unique @default("")
  description     String      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  password        String
  watching        Candidate[] @relation("Candidate_watching")
}

model Company {
  id                     String      @id @default(cuid())
  name                   String      @default("")
  positions              Position[]  @relation("Position_company")
  addresses              Address[]   @relation("Company_addresses")
  contacts               Contact[]   @relation("Company_contacts")
  contracts_filesize     Int?
  contracts_filename     String?
  logo_filesize          Int?
  logo_extension         String?
  logo_width             Int?
  logo_height            Int?
  logo_id                String?
  from_Interview_company Interview[] @relation("Interview_company")
}

model Interview {
  id          String     @id @default(cuid())
  title       String     @default("")
  date        DateTime
  canditate   Candidate? @relation("Interview_canditate", fields: [canditateId], references: [id])
  canditateId String?    @map("canditate")
  company     Company?   @relation("Interview_company", fields: [companyId], references: [id])
  companyId   String?    @map("company")
  contact     Contact[]  @relation("Interview_contact")
  position    Position?  @relation("Interview_position", fields: [positionId], references: [id])
  positionId  String?    @map("position")
  description String     @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")

  @@index([canditateId])
  @@index([companyId])
  @@index([positionId])
}

model Candidate {
  id                       String              @id @default(cuid())
  name                     String              @default("")
  surname                  String              @default("")
  email                    String              @unique @default("")
  phone                    String              @default("")
  linkedIn                 String              @default("")
  description              String              @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  watching                 User[]              @relation("Candidate_watching")
  skills                   CandidateSkill[]    @relation("Candidate_skills")
  documents                CandidateDocument[] @relation("Candidate_documents")
  from_Interview_canditate Interview[]         @relation("Interview_canditate")
}

model CandidateSkill {
  id                    String      @id @default(cuid())
  skill                 Skill?      @relation("CandidateSkill_skill", fields: [skillId], references: [id])
  skillId               String?     @map("skill")
  fromDate              DateTime?
  description           String      @default("")
  from_Candidate_skills Candidate[] @relation("Candidate_skills")

  @@index([skillId])
}

model CandidateDocument {
  id                       String      @id @default(cuid())
  type                     String?
  document_filesize        Int?
  document_filename        String?
  from_Candidate_documents Candidate[] @relation("Candidate_documents")
}

model Contact {
  id                     String      @id @default(cuid())
  image_filesize         Int?
  image_extension        String?
  image_width            Int?
  image_height           Int?
  image_id               String?
  name                   String      @default("")
  surname                String      @default("")
  description            String      @default("")
  phone                  String      @default("")
  email                  String      @unique @default("")
  from_Company_contacts  Company[]   @relation("Company_contacts")
  from_Interview_contact Interview[] @relation("Interview_contact")
  from_Position_contacts Position[]  @relation("Position_contacts")
}

model ContactType {
  id          String  @id @default(cuid())
  type        String?
  isPrimary   Boolean @default(false)
  content     String  @default("")
  description String  @default("")
}

model Position {
  id                      String      @id @default(cuid())
  title                   String      @default("")
  company                 Company?    @relation("Position_company", fields: [companyId], references: [id])
  companyId               String?     @map("company")
  contacts                Contact[]   @relation("Position_contacts")
  description             String      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  active                  Boolean     @default(false)
  from_Interview_position Interview[] @relation("Interview_position")

  @@index([companyId])
}

model Address {
  id                     String    @id @default(cuid())
  addressCountry         String    @default("")
  addressLocality        String    @default("")
  postalCode             String    @default("")
  postOfficeBoxNumber    String    @default("")
  streetAddress          String    @default("")
  from_Company_addresses Company[] @relation("Company_addresses")
}

model Skill {
  id                        String           @id @default(cuid())
  title                     String           @unique @default("")
  description               String           @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  from_CandidateSkill_skill CandidateSkill[] @relation("CandidateSkill_skill")
}